// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductionOptima.Persistence.Context;

#nullable disable

namespace BatteryOptima.Persistence.Migrations
{
    [DbContext(typeof(ProductionOptimaContext))]
    [Migration("20240504160621_first2")]
    partial class first2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductionOptima.Domain.Entities.BatteryCell", b =>
                {
                    b.Property<int>("BatteryCellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatteryCellId"));

                    b.Property<int>("CellDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CellSerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfMesurementDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("InternalResistance")
                        .HasColumnType("float");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<bool>("Statu")
                        .HasColumnType("bit");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Voltage")
                        .HasColumnType("float");

                    b.HasKey("BatteryCellId");

                    b.HasIndex("CellDetailId");

                    b.HasIndex("ProducerId");

                    b.ToTable("BatteryCells");
                });

            modelBuilder.Entity("ProductionOptima.Domain.Entities.CellDetail", b =>
                {
                    b.Property<int>("CellDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CellDetailId"));

                    b.Property<int>("CellId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfTest")
                        .HasColumnType("datetime2");

                    b.Property<double>("TestIR")
                        .HasColumnType("float");

                    b.Property<double>("TestVoltage")
                        .HasColumnType("float");

                    b.HasKey("CellDetailId");

                    b.ToTable("CellDetails");
                });

            modelBuilder.Entity("ProductionOptima.Domain.Entities.Producer", b =>
                {
                    b.Property<int>("ProducerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProducerId"));

                    b.Property<string>("ProducerCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProducerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerNo")
                        .HasColumnType("int");

                    b.HasKey("ProducerId");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("ProductionOptima.Domain.Entities.BatteryCell", b =>
                {
                    b.HasOne("ProductionOptima.Domain.Entities.CellDetail", "CellDetail")
                        .WithMany("BatteryCells")
                        .HasForeignKey("CellDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionOptima.Domain.Entities.Producer", "Producer")
                        .WithMany("BatteryCells")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CellDetail");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("ProductionOptima.Domain.Entities.CellDetail", b =>
                {
                    b.Navigation("BatteryCells");
                });

            modelBuilder.Entity("ProductionOptima.Domain.Entities.Producer", b =>
                {
                    b.Navigation("BatteryCells");
                });
#pragma warning restore 612, 618
        }
    }
}
